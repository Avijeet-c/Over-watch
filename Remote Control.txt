// Model URL
let imageModelURL = 'https://teachablemachine.withgoogle.com/models/abmFC7UX_/';

// Video
let video;
let flippedVideo;

// To store the classification
let label = "";
let confidence = 0.0;

// Load the model first
function preload() {
  classifier = ml5.imageClassifier(imageModelURL + 'model.json');
}

function setup() {
  createCanvas(320, 320);

  // Create the video
  video = createCapture(VIDEO);
  video.size(320, 240);
  video.hide();

  flippedVideo = ml5.flipImage(video);

  // Start classifying
  classifyVideo();

  // Add Stop Button
  let StopButton = createButton("Stop");
  StopButton.position(10, height - 40);
  StopButton.mousePressed(StopVideo);

  // Add Restart Button
  let restartButton = createButton("Restart");
  restartButton.position(70, height - 40);
  restartButton.mousePressed(restartVideo);
}

function draw() {
  
  setGradient(0, 0, width, height, color(255, 0, 0), color(0, 255, 255), "Y");

  noStroke();
  fill(255, 100);
  rect(2, 2, width - 4, height - 50);
  image(flippedVideo, 2, 2, width - 4, height - 50);

  fill(255, 200);
  textSize(20);
  textAlign(CENTER);
  text(label, width / 2, height - 20);
  text("Confidence: " + confidence, width / 2, height - 5);
}

// Get a prediction 
function classifyVideo() {
  flippedVideo = ml5.flipImage(video);
  classifier.classify(flippedVideo, gotResult);
  flippedVideo.remove();
}

// When we get a result
function gotResult(error, results) {
  // If there is an error
  if (error) {
    console.error(error);
    return;
  }

  // The results are in an array ordered by confidence.
  label = results[0].label;
  confidence = nf(results[0].confidence, 0, 2);

  // Classify again!
  classifyVideo();
}

function setGradient(x, y, w, h, c1, c2, axis) {
  noFill();
  
  if (axis == "Y") {
    // Top to bottom gradient
    for (let i = y; i <= y+h; i++) {
      let inter = map(i, y, y+h, 0, 1);
      let c = lerpColor(c1, c2, inter);
      stroke(c);
      line(x, i, x+w, i);
    }
  }
}

// Stop video 
function StopVideo() {
  video.stop();
  flippedVideo.remove();
  noLoop();
}

// Restart video 
function restartVideo() {
  loop();
  video = createCapture(VIDEO);
  video.size(320, 240);
  video.hide();
  flippedVideo = ml5.flipImage(video);
  classifyVideo();
}